!function(n){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(n,t){!function(n,e){if(!v[n]||!w[n])return;for(var t in w[n]=!1,e)Object.prototype.hasOwnProperty.call(e,t)&&(h[t]=e[t]);0==--g&&0===x&&O()}(n,t),e&&e(n,t)};var t,r=!0,o="1b8803e987fecc12b524",i=1e4,a={},c=[],s=[];function d(n){var e=D[n];if(!e)return _;var r=function(r){return e.hot.active?(D[r]?-1===D[r].parents.indexOf(n)&&D[r].parents.push(n):(c=[n],t=r),-1===e.children.indexOf(r)&&e.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+n),c=[]),_(r)},o=function(n){return{configurable:!0,enumerable:!0,get:function(){return _[n]},set:function(e){_[n]=e}}};for(var i in _)Object.prototype.hasOwnProperty.call(_,i)&&"e"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(n){return"ready"===l&&f("prepare"),x++,_.e(n).then(e,function(n){throw e(),n});function e(){x--,"prepare"===l&&(y[n]||k(n),0===x&&0===g&&O())}},r}var p=[],l="idle";function f(n){l=n;for(var e=0;e<p.length;e++)p[e].call(null,n)}var u,h,m,g=0,x=0,y={},w={},v={};function b(n){return+n+""===n?+n:n}function j(n){if("idle"!==l)throw new Error("check() is only allowed in idle status");return r=n,f("check"),(e=i,e=e||1e4,new Promise(function(n,t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var r=new XMLHttpRequest,i=_.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=e,r.send(null)}catch(n){return t(n)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)t(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)n();else if(200!==r.status&&304!==r.status)t(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(n){return void t(n)}n(e)}}})).then(function(n){if(!n)return f("idle"),null;w={},y={},v=n.c,m=n.h,f("prepare");var e=new Promise(function(n,e){u={resolve:n,reject:e}});h={};return k(0),"prepare"===l&&0===x&&0===g&&O(),e});var e}function k(n){v[n]?(w[n]=!0,g++,function(n){var e=document.getElementsByTagName("head")[0],t=document.createElement("script");t.charset="utf-8",t.src=_.p+""+n+"."+o+".hot-update.js",e.appendChild(t)}(n)):y[n]=!0}function O(){f("ready");var n=u;if(u=null,n)if(r)Promise.resolve().then(function(){return E(r)}).then(function(e){n.resolve(e)},function(e){n.reject(e)});else{var e=[];for(var t in h)Object.prototype.hasOwnProperty.call(h,t)&&e.push(b(t));n.resolve(e)}}function E(e){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var t,r,i,s,d;function p(n){for(var e=[n],t={},r=e.slice().map(function(n){return{chain:[n],id:n}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((s=D[i])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var c=0;c<s.parents.length;c++){var d=s.parents[c],p=D[d];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([d]),moduleId:i,parentId:d};-1===e.indexOf(d)&&(p.hot._acceptedDependencies[i]?(t[d]||(t[d]=[]),u(t[d],[i])):(delete t[d],e.push(d),r.push({chain:a.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:n,outdatedModules:e,outdatedDependencies:t}}function u(n,e){for(var t=0;t<e.length;t++){var r=e[t];-1===n.indexOf(r)&&n.push(r)}}e=e||{};var g={},x=[],y={},w=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var j in h)if(Object.prototype.hasOwnProperty.call(h,j)){var k;d=b(j);var O=!1,E=!1,A=!1,U="";switch((k=h[j]?p(d):{type:"disposed",moduleId:j}).chain&&(U="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":e.onDeclined&&e.onDeclined(k),e.ignoreDeclined||(O=new Error("Aborted because of self decline: "+k.moduleId+U));break;case"declined":e.onDeclined&&e.onDeclined(k),e.ignoreDeclined||(O=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+U));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(k),e.ignoreUnaccepted||(O=new Error("Aborted because "+d+" is not accepted"+U));break;case"accepted":e.onAccepted&&e.onAccepted(k),E=!0;break;case"disposed":e.onDisposed&&e.onDisposed(k),A=!0;break;default:throw new Error("Unexception type "+k.type)}if(O)return f("abort"),Promise.reject(O);if(E)for(d in y[d]=h[d],u(x,k.outdatedModules),k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,d)&&(g[d]||(g[d]=[]),u(g[d],k.outdatedDependencies[d]));A&&(u(x,[k.moduleId]),y[d]=w)}var I,R=[];for(r=0;r<x.length;r++)d=x[r],D[d]&&D[d].hot._selfAccepted&&R.push({module:d,errorHandler:D[d].hot._selfAccepted});f("dispose"),Object.keys(v).forEach(function(n){!1===v[n]&&function(n){delete installedChunks[n]}(n)});for(var C,H,B=x.slice();B.length>0;)if(d=B.pop(),s=D[d]){var L={},M=s.hot._disposeHandlers;for(i=0;i<M.length;i++)(t=M[i])(L);for(a[d]=L,s.hot.active=!1,delete D[d],delete g[d],i=0;i<s.children.length;i++){var P=D[s.children[i]];P&&((I=P.parents.indexOf(d))>=0&&P.parents.splice(I,1))}}for(d in g)if(Object.prototype.hasOwnProperty.call(g,d)&&(s=D[d]))for(H=g[d],i=0;i<H.length;i++)C=H[i],(I=s.children.indexOf(C))>=0&&s.children.splice(I,1);for(d in f("apply"),o=m,y)Object.prototype.hasOwnProperty.call(y,d)&&(n[d]=y[d]);var S=null;for(d in g)if(Object.prototype.hasOwnProperty.call(g,d)&&(s=D[d])){H=g[d];var N=[];for(r=0;r<H.length;r++)if(C=H[r],t=s.hot._acceptedDependencies[C]){if(-1!==N.indexOf(t))continue;N.push(t)}for(r=0;r<N.length;r++){t=N[r];try{t(H)}catch(n){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:d,dependencyId:H[r],error:n}),e.ignoreErrored||S||(S=n)}}}for(r=0;r<R.length;r++){var T=R[r];d=T.module,c=[d];try{_(d)}catch(n){if("function"==typeof T.errorHandler)try{T.errorHandler(n)}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:t,originalError:n}),e.ignoreErrored||S||(S=t),S||(S=n)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:d,error:n}),e.ignoreErrored||S||(S=n)}}return S?(f("fail"),Promise.reject(S)):(f("idle"),new Promise(function(n){n(x)}))}var D={};function _(e){if(D[e])return D[e].exports;var r=D[e]={i:e,l:!1,exports:{},hot:function(n){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:t!==n,active:!0,accept:function(n,t){if(void 0===n)e._selfAccepted=!0;else if("function"==typeof n)e._selfAccepted=n;else if("object"==typeof n)for(var r=0;r<n.length;r++)e._acceptedDependencies[n[r]]=t||function(){};else e._acceptedDependencies[n]=t||function(){}},decline:function(n){if(void 0===n)e._selfDeclined=!0;else if("object"==typeof n)for(var t=0;t<n.length;t++)e._declinedDependencies[n[t]]=!0;else e._declinedDependencies[n]=!0},dispose:function(n){e._disposeHandlers.push(n)},addDisposeHandler:function(n){e._disposeHandlers.push(n)},removeDisposeHandler:function(n){var t=e._disposeHandlers.indexOf(n);t>=0&&e._disposeHandlers.splice(t,1)},check:j,apply:E,status:function(n){if(!n)return l;p.push(n)},addStatusHandler:function(n){p.push(n)},removeStatusHandler:function(n){var e=p.indexOf(n);e>=0&&p.splice(e,1)},data:a[n]};return t=void 0,e}(e),parents:(s=c,c=[],s),children:[]};return n[e].call(r.exports,r,r.exports,d(e)),r.l=!0,r.exports}_.m=n,_.c=D,_.d=function(n,e,t){_.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:t})},_.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},_.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return _.d(e,"a",e),e},_.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},_.p="",_.h=function(){return o},d(6)(_.s=6)}([function(n,e){n.exports=jQuery},function(n,e,t){(n.exports=t(4)(!1)).push([n.i,"body {\n  margin: 0;\n  background: linear-gradient(-9deg, #161616, #4a4a4a); }\n  body .menu {\n    display: none; }\n  @media (max-width: 767px) {\n    body .menu {\n      display: block;\n      position: fixed;\n      height: 50px;\n      width: 50px;\n      top: 0;\n      right: 0;\n      z-index: 2;\n      border-style: none;\n      background-color: #2B2B2B; } }\n\nfooter {\n  color: #F7F7F7;\n  background-color: #050505;\n  height: 40px; }\n\nheader {\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center; }\n\nnav {\n  background-color: #050505;\n  position: fixed;\n  z-index: 1;\n  width: 100%;\n  height: 60px; }\n  nav .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: auto;\n    width: 80%;\n    height: 100%; }\n    nav .container .options {\n      display: flex;\n      align-items: center;\n      height: 100%; }\n      nav .container .options a {\n        display: flex;\n        align-items: center;\n        background-color: #2B2B2B;\n        justify-content: center;\n        height: 100%;\n        width: 85px;\n        text-decoration: none;\n        color: #F7F7F7; }\n    nav .container .icons {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      height: 90%;\n      width: 190px; }\n      nav .container .icons a {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 5px; }\n        nav .container .icons a img {\n          height: 32px;\n          width: 32px; }\n    @media (min-width: 768px) and (max-width: 1023px) {\n      nav .container .options {\n        width: 29vw; }\n        nav .container .options a {\n          width: 7vw; }\n      nav .container .icons {\n        width: 21vw; }\n        nav .container .icons a {\n          height: 100%;\n          width: 5vw;\n          padding: 0; }\n          nav .container .icons a img {\n            height: 30px;\n            width: 30px; } }\n\n@media (max-width: 767px) {\n  nav.hidden {\n    display: none; }\n  nav {\n    display: block;\n    position: fixed;\n    height: 100%;\n    width: 100%;\n    top: 0; }\n    nav .container {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%; }\n      nav .container .options {\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        margin: auto;\n        height: auto; }\n        nav .container .options a {\n          margin: 10px 0;\n          width: 60%;\n          height: 70px;\n          max-width: 200px; }\n      nav .container .icons {\n        height: 12%;\n        width: 200px; }\n        nav .container .icons a img {\n          height: 36px;\n          width: 36px; } }\n\nsection .title {\n  margin: auto;\n  width: auto; }\n\nsection .container {\n  display: flex;\n  justify-content: center;\n  background: linear-gradient(15deg, rgba(122, 122, 122, 0.8), rgba(152, 152, 152, 0.8));\n  margin-bottom: 30px; }\n  section .container.pause-anim {\n    visibility: hidden; }\n  section .container.in-view {\n    -webkit-animation: fade-in 2s ease-out 1 normal forwards;\n    -moz-animation: fade-in 2s ease-out 1 normal forwards;\n    -o-animation: fade-in 2s ease-out 1 normal forwards;\n    animation: fade-in 2s ease-out 1 normal forwards; }\n\n#about .container {\n  padding: 38px 30px;\n  align-items: center; }\n  #about .container img {\n    margin: auto;\n    height: auto;\n    max-width: 230px;\n    width: auto; }\n  #about .container .text {\n    margin: auto 20px; }\n  @media (max-width: 767px) {\n    #about .container {\n      flex-wrap: wrap; }\n      #about .container .text {\n        max-width: 450px; }\n      #about .container .about-img {\n        order: -1; }\n        #about .container .about-img img {\n          max-width: 200px;\n          max-height: 200px;\n          width: 100%;\n          margin: 16px 0; } }\n  @media (min-width: 768px) and (max-width: 1023px) {\n    #about .container img {\n      max-width: 200px;\n      max-height: 200px;\n      width: 20vw; } }\n\n#contact .container {\n  padding: 38px; }\n  #contact .container form {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    max-width: 550px;\n    width: 100%;\n    height: 350px; }\n    #contact .container form .entry {\n      height: 40px;\n      background-color: transparent;\n      border-style: none;\n      border-bottom: 3px solid #69BFE2; }\n      #contact .container form .entry:focus {\n        outline: none; }\n    #contact .container form .message {\n      height: 70px;\n      resize: none;\n      background-color: transparent;\n      border-style: none;\n      border-bottom: 3px solid #69BFE2; }\n      #contact .container form .message:focus {\n        outline: none; }\n    #contact .container form .submit {\n      margin: 20px 0 0 auto;\n      width: 100px;\n      height: 38px;\n      border-style: none;\n      background-color: #31A7D8; }\n    #contact .container form label {\n      margin-top: 20px; }\n\n#projects .container {\n  padding: 38px 30px;\n  flex-wrap: wrap; }\n  #projects .container .exit-wrapper {\n    margin-left: auto;\n    height: 0; }\n    #projects .container .exit-wrapper.hidden {\n      display: none; }\n    #projects .container .exit-wrapper button {\n      position: relative;\n      height: 38px;\n      width: 50px;\n      background-color: #69BFE2;\n      border-style: none;\n      top: -38px;\n      left: 30px; }\n  #projects .container .project-module {\n    display: flex;\n    margin: 20px 0;\n    flex-direction: column; }\n    #projects .container .project-module.hidden {\n      display: none; }\n    #projects .container .project-module h3 {\n      margin: 12px auto; }\n    #projects .container .project-module .info-container {\n      display: flex;\n      align-items: center; }\n      #projects .container .project-module .info-container .text {\n        margin: 0 20px; }\n      #projects .container .project-module .info-container .module-img {\n        display: flex;\n        flex-direction: column; }\n        #projects .container .project-module .info-container .module-img a {\n          margin: 20px auto 0 auto;\n          background-color: #31A7D8;\n          height: 38px;\n          width: 100px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          text-decoration: none; }\n    @media (max-width: 767px) {\n      #projects .container .project-module {\n        width: 100%; }\n        #projects .container .project-module .info-container {\n          flex-direction: column;\n          max-width: 500px;\n          margin: auto; }\n          #projects .container .project-module .info-container .module-img img {\n            width: 100%;\n            height: auto; } }\n  #projects .container .card {\n    display: flex;\n    align-items: center;\n    max-width: 700px;\n    margin: 20px 0; }\n    #projects .container .card .text {\n      display: none; }\n    #projects .container .card.hidden {\n      display: none; }\n    #projects .container .card img {\n      margin: auto;\n      height: auto;\n      width: auto;\n      max-width: 300px; }\n    #projects .container .card .info {\n      display: flex;\n      flex-direction: column;\n      margin-left: 30px;\n      height: 200px; }\n      #projects .container .card .info .study {\n        border-style: none;\n        background-color: #31A7D8;\n        width: 100px;\n        min-height: 38px; }\n  @media (max-width: 767px) {\n    #projects .container {\n      padding: 38px 20px; }\n      #projects .container .exit-wrapper button {\n        left: 20px; }\n      #projects .container .card {\n        flex-wrap: wrap;\n        justify-content: center;\n        max-width: 300px;\n        width: 88%;\n        margin: 20px; }\n        #projects .container .card .project-img {\n          width: 100%; }\n          #projects .container .card .project-img img {\n            height: auto;\n            width: 100%; }\n        #projects .container .card .info {\n          text-align: center;\n          margin: 0 30px;\n          max-height: 200px; }\n          #projects .container .card .info h3 {\n            margin: 0; }\n          #projects .container .card .info .study {\n            margin: 0 auto; } }\n  @media (min-width: 768px) and (max-width: 1023px) {\n    #projects .container {\n      padding: 38px 20px; }\n      #projects .container .exit-wrapper button {\n        left: 20px; }\n      #projects .container .card img {\n        max-width: 300px;\n        max-height: 300px;\n        width: 30vw; } }\n\n#skills .container {\n  flex-wrap: wrap;\n  padding: 38px 100px; }\n  #skills .container p {\n    background-color: #fff;\n    padding: 10px;\n    margin: 10px 20px; }\n  @media (max-width: 767px) {\n    #skills .container {\n      padding: 38px 20px; }\n      #skills .container p {\n        padding: 10px;\n        margin: 10px; } }\n  @media (min-width: 768px) and (max-width: 1023px) {\n    #skills .container {\n      padding: 38px 70px; }\n      #skills .container p {\n        padding: 10px;\n        margin: 10px 20px; } }\n\nmain {\n  display: flex; }\n  main .wrapper {\n    margin: auto;\n    width: 900px; }\n    @media (min-width: 768px) and (max-width: 1023px) {\n      main .wrapper {\n        width: 95%; } }\n    @media (max-width: 767px) {\n      main .wrapper {\n        width: 100%; } }\n\n@-webkit-keyframes fade-in {\n  0% {\n    opacity: 0; }\n  100% {\n    opacity: 1; } }\n\n@-moz-keyframes fade-in {\n  0% {\n    opacity: 0; }\n  100% {\n    opacity: 1; } }\n\n@-o-keyframes fade-in {\n  0% {\n    opacity: 0; }\n  100% {\n    opacity: 1; } }\n\n@keyframes fade-in {\n  0% {\n    opacity: 0; }\n  100% {\n    opacity: 1; } }\n\n@-webkit-keyframes slide-in-left {\n  0% {\n    transform: translate(-100%, 0); }\n  100% {\n    transform: translate(0, 0); } }\n\n@-moz-keyframes slide-in-left {\n  0% {\n    transform: translate(-100%, 0); }\n  100% {\n    transform: translate(0, 0); } }\n\n@-o-keyframes slide-in-left {\n  0% {\n    transform: translate(-100%, 0); }\n  100% {\n    transform: translate(0, 0); } }\n\n@keyframes slide-in-left {\n  0% {\n    transform: translate(-100%, 0); }\n  100% {\n    transform: translate(0, 0); } }\n\n@-webkit-keyframes slide-in-right {\n  0% {\n    transform: translate(100%, 0); }\n  100% {\n    transform: translate(0, 0); } }\n\n@-moz-keyframes slide-in-right {\n  0% {\n    transform: translate(100%, 0); }\n  100% {\n    transform: translate(0, 0); } }\n\n@-o-keyframes slide-in-right {\n  0% {\n    transform: translate(100%, 0); }\n  100% {\n    transform: translate(0, 0); } }\n\n@keyframes slide-in-right {\n  0% {\n    transform: translate(100%, 0); }\n  100% {\n    transform: translate(0, 0); } }\n",""])},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,r=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var o,i=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(n,e,t){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),c=function(n){var e={};return function(n){if("function"==typeof n)return n();if(void 0===e[n]){var t=function(n){return document.querySelector(n)}.call(this,n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}}(),s=null,d=0,p=[],l=t(2);function f(n,e){for(var t=0;t<n.length;t++){var r=n[t],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],e))}else{var c=[];for(a=0;a<r.parts.length;a++)c.push(y(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:c}}}}function u(n,e){for(var t=[],r={},o=0;o<n.length;o++){var i=n[o],a=e.base?i[0]+e.base:i[0],c={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(c):t.push(r[a]={id:a,parts:[c]})}return t}function h(n,e){var t=c(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=p[p.length-1];if("top"===n.insertAt)r?r.nextSibling?t.insertBefore(e,r.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),p.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=c(n.insertInto+" "+n.insertAt.before);t.insertBefore(e,o)}}function m(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=p.indexOf(n);e>=0&&p.splice(e,1)}function g(n){var e=document.createElement("style");return n.attrs.type="text/css",x(e,n.attrs),h(n,e),e}function x(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function y(n,e){var t,r,o,i;if(e.transform&&n.css){if(!(i=e.transform(n.css)))return function(){};n.css=i}if(e.singleton){var a=d++;t=s||(s=g(e)),r=b.bind(null,t,a,!1),o=b.bind(null,t,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",x(e,n.attrs),h(n,e),e}(e),r=function(n,e,t){var r=t.css,o=t.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=l(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),c=n.href;n.href=URL.createObjectURL(a),c&&URL.revokeObjectURL(c)}.bind(null,t,e),o=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=g(e),r=function(n,e){var t=e.css,r=e.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){m(t)});return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=u(n,e);return f(t,e),function(n){for(var r=[],o=0;o<t.length;o++){var a=t[o];(c=i[a.id]).refs--,r.push(c)}n&&f(u(n,e),e);for(o=0;o<r.length;o++){var c;if(0===(c=r[o]).refs){for(var s=0;s<c.parts.length;s++)c.parts[s]();delete i[c.id]}}}};var w,v=(w=[],function(n,e){return w[n]=e,w.filter(Boolean).join("\n")});function b(n,e,t,r){var o=t?"":r.css;if(n.styleSheet)n.styleSheet.cssText=v(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}},function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[t].concat(i).concat([o]).join("\n")}var a;return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<n.length;o++){var a=n[o];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){var r=t(1);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},i=t(3)(r,o);r.locals&&(n.exports=r.locals),n.hot.accept(1,function(e){!function(){var e=t(1);if("string"==typeof e&&(e=[[n.i,e,""]]),!function(n,e){var t,r=0;for(t in n){if(!e||n[t]!==e[t])return!1;r++}for(t in e)r--;return 0===r}(r.locals,e.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(e)}()}),n.hot.dispose(function(){i()})},function(n,e,t){"use strict";t.r(e);t(5);var r=t(0),o=t.n(r);const i=o()(".pause-anim"),a=o()(".card"),c=o()(window),s=o()(".project-module"),d=s.find(".text"),p=s.find("h3"),l=s.find("img"),f=o()(".exit-wrapper"),u=90;let h=c.height();o()(".menu").click(()=>{o()("nav").toggleClass("hidden")}),o()(".study").click(n=>{!function(n){s.toggleClass("hidden"),f.toggleClass("hidden");let e=o()(n.target).parent().next(".text").html(),t=o()(n.target).siblings("h3").html(),r=o()(n.target).parent().siblings(".project-img").children("img").attr("src");d.html(e),p.html(t),l.attr("src",r);for(let n of a)n.classList.toggle("hidden")}(n)}),f.click(()=>{!function(n){s.toggleClass("hidden"),d.empty(),f.toggleClass("hidden");for(let n of a)n.classList.toggle("hidden")}()}),c.on("scroll",function(){for(let n=0;n<i.length;n++){let e=i[n],t=e.getBoundingClientRect().height,r=e.getBoundingClientRect().top,o=r+t;o>=u&&r<=h-u&&(i[n].className=i[n].className.replace("pause-anim","in-view"))}}),c.on("resize",()=>{h=c.height()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,